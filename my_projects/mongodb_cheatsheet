# Introduction
MongoDB is a document-oriented database, not a relational one. 
MongoDB is a powerful, flexible, and scalable general-purpose database. 
It combines the ability to scale out with features such as secondary indexes, range queries, sorting, aggregations, and geospatial indexes.

## Document vs Rows
* By allowing embedded documents and arrays, the document-oriented approach makes it
possible to represent complex hierarchical relationships with a single record.

* There are also no predefined schemas: a document’s keys and values
  are not of fixed types or sizes.

## Scaling
Scaling a database comes down to the choice between scaling up (vertical) (getting a bigger machine) or scaling out (horizontal) (partitioning data
across more machines).

MongoDB was designed to scale out. The document-oriented data model makes it easier to split data across multiple servers. 
MongoDB automatically takes care of balancing data and load across a cluster, redistributing documents automatically
and routing reads and writes to the correct machines.

## Rich features

### Indexing 
MongoDB supports generic secondary indexes and provides
unique, compound, geospatial, and full-text indexing capabilities
as well.

### Aggregation
MongoDB provides an aggregation framework based on the concept of data processing pipelines.

### Special collection and index types
1. MongoDB supports time-to-live (TTL) collections for data that
   should expire at a certain time
1. Also supports partial indexes limited to only those
   documents matching a criteria filter in order to increase efficiency
   and reduce the amount of storage space required.

### File Storage 
MongoDB supports an easy-to-use protocol for storing large files
and file metadata.

### Performance
It uses opportunistic locking in its WiredTiger
storage engine to maximize concurrency and throughput. It uses as
much RAM as it can as its cache and attempts to automatically
choose the correct indexes for queries.

#### WiredTiger
WiredTiger uses document-level concurrency control for write operations. As a result, multiple clients can modify different documents of a collection at the same time.
WiredTiger uses only intent locks at the global, database and collection levels. 

## Limitations
Complex Joins are not possible. Since 3.6, multi-joins are possible but complex joins prove difficult to scale on distributed systems.

# Get Started

## Glossary

1. A document is the basic unit of data for MongoDB and is
roughly equivalent to a row in a relational database
management system (but much more expressive).

1. A collection can be thought of as a table with a
dynamic schema.

1. Every document has a special key, "_id", that is unique
   within a collection

1. MongoDB is distributed with a simple but powerful tool
   called the mongo shell. The mongo shell provides built-in
   support for administering MongoDB instances and
   manipulating data using the MongoDB query language.

## Document
* An ordered set of keys
with associated values. The representation of a document varies by
programming language, but most languages have a data structure that
is a natural fit, such as a map, hash, or dictionary. 
<code>{"greeting" : "Hello, world!", "views" : 3}</code>

* Values in documents are not just “blobs.” They can
be one of several different data types (or even an entire embedded
document—see “Embedded Documents”).

* The keys in a document are strings.
    * Keys must not contain the character \0 (the null character).
    * The <code>.</code> and <code>$</code> characters have some special properties and
      should be used only in certain circumstances
    * Documents in MongoDB cannot contain duplicate keys. e.g : <code>{"greeting" : "Hello, world!", "greeting" : "Hello,
                                                                      MongoDB!"}</code>
* MongoDB is type-sensitive and case-sensitive.
    * <code>{"count" : 5}</code> and <code>{"count" : "5"}</code> are different
    
## Collection
A collection is a group of documents. (loosely analogous to table)

* Collections have dynamic schemas.

* Why to use more than one collection ? 
    * Keeping different kinds of documents in the same collection
      can be a nightmare for developers and admins.
    * It’s much faster to get a list of collections than to extract a
      list of the types of documents in a collection.
    * Grouping documents of the same kind together in the same
      collection allows for data locality.
    * Indexes are defined per collection.
    * One convention for organizing collections is to use namespaced
      subcollections separated by the <code>.</code> character.

